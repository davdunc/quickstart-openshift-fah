{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "OpenShift Template (basetemplate with synced sshkeys)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "VPCCIDR",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PrivateSubnet3ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "PublicSubnet3ID",
                        "RemoteAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "OpenShift Nodes Configuration"
                    },
                    "Parameters": [
                        "NumberOfMaster",
                        "NumberOfEtcd",
                        "NumberOfNodes",
                        "MasterInstanceType",
                        "EtcdInstanceType",
                        "NodesInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Ansible PlayBook Configuration"
                    },
                    "Parameters": [
                        "AnsiblePlayBookType",
                        "AnsiblePlayBookGitRepoTag"
                    ]
                },
                {
                    "Label": {
                        "default": "Red Hat Subscription Information"
                    },
                    "Parameters": [
                        "RedhatSubscriptionUserName",
                        "RedhatSubscriptionPassword",
                        "RedhatSubscriptionPoolID"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "KeyPairName": {
                    "default": "SSH Key Name"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet 2 ID"
                },
                "PrivateSubnet3ID": {
                    "default": "Private Subnet 3 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 ID"
                },
                "PublicSubnet3ID": {
                    "default": "Public Subnet 3 ID"
                },
                "QSS3BucketName": {
                    "defauS3BucketNamelt": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RemoteAccessCIDR": {
                    "default": "Allowed External Access CIDR"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "RedhatSubscriptionUserName": {
                    "default": "Red Hat Subscription UserName"
                },
                "RedhatSubscriptionPassword": {
                    "default": "Red Hat Subscription Password"
                },
                "RedhatSubscriptionPoolID": {
                    "default": "Red Hat PoolID"
                },
                "AnsiblePlayBookType": {
                    "default": "Ansible PlayBook Mode"
                },
                "AnsiblePlayBookGitRepoTag": {
                    "default": "Git Repo Release Version"
                },
                "MasterInstanceType": {
                    "default": "Master Instance Type"
                },
                "EtcdInstanceType": {
                    "default": "Etcd Instance Type"
                },
                "NodesInstanceType": {
                    "default": "Nodes Instance Type"
                },
                "NumberOfMaster": {
                    "default": "Number of Master's"
                },
                "NumberOfEtcd": {
                    "default": "Number of Etcd's"
                },
                "NumberOfNodes": {
                    "default": "Number of Nodes's"
                }
            }
        }
    },
    "Parameters": {
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-b1f432cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet3ID": {
            "Description": "ID of private subnet 2 in Availability Zone 3 for the Workload (e.g., subnet-b1f4a2cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet3ID": {
            "Description": "ID of public subnet 2 in Availability Zone 3 for the ELB load balancer (e.g., subnet-e324ad8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "redhat/openshift/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The CIDR IP range that is permitted to access the instances We recommend that you set this value to a trusted IP range.",
            "Type": "String"
        },
        "RedhatSubscriptionUserName": {
            "Description": "Enter Redhat RHN UserName",
            "Type": "String"
        },
        "RedhatSubscriptionPassword": {
            "Description": "Enter Redhat RHN Password",
            "Type": "String"
        },
        "RedhatSubscriptionPoolID": {
            "Description": "Enter Redhat RHN PoolID",
            "Type": "String"
        },
        "AnsiblePlayBookType": {
            "Description": "Note:This QuickStart only supports OpenSource-Version for Development Purposes!",
            "Default": "Subscription-Version",
            "AllowedValues": [
                "Subscription-Version",
                "OpenSource-Version"
            ],
            "Type": "String"
        },
        "AnsiblePlayBookGitRepoTag": {
            "Description": "Only Used if [OpenSource-Version] is selected. List of Development Releases available here -> https://github.com/openshift/openshift-ansible/releases",
            "Default": "3.6.173.0.5-5",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        },
        "MasterInstanceType": {
            "AllowedValues": [
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Workload instances",
            "Type": "String"
        },
        "EtcdInstanceType": {
            "AllowedValues": [
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Workload instances",
            "Type": "String"
        },
        "NodesInstanceType": {
            "AllowedValues": [
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Workload instances",
            "Type": "String"
        },
        "NumberOfMaster": {
            "Default": "3",
            "Description": "The desired capacity for the OpenShift Master Nodes",
            "Type": "Number",
            "AllowedValues": ["2", "3"]
        },
        "NumberOfEtcd": {
            "Default": "3",
            "Description": "The desired capacity for the OpenShift Master Nodes",
            "Type": "Number",
            "AllowedValues": ["2", "3"]
        },
        "NumberOfNodes": {
            "Default": "3",
            "Description": "The desired capacity for the OpenShift Master Nodes",
            "Type": "Number",
            "AllowedValues": ["2", "3"]
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [{
                "Assert": {
                    "Fn::EachMemberIn": [{
                            "Fn::ValueOfAll": [
                                "AWS::EC2::Subnet::Id",
                                "VpcId"
                            ]
                        },
                        {
                            "Fn::RefAll": "AWS::EC2::VPC::Id"
                        }
                    ]
                },
                "AssertDescription": "All subnets must in the VPC"
            }]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "RHEL74HVM": "RHEL-7.2_HVM-20161025-x86_64-1-Hourly2-GP2"
            },
            "ap-northeast-1": {
                "RHEL74HVM": "ami-2265c543"
            },
            "ap-northeast-2": {
                "RHEL74HVM": "ami-a9e532c7"
            },
            "ap-south-1": {
                "RHEL74HVM": "ami-917205fe"
            },
            "ap-southeast-1": {
                "RHEL74HVM": "ami-22953841"
            },
            "ap-southeast-2": {
                "RHEL74HVM": "ami-91cdf0f2"
            },
            "ca-central-1": {
                "RHEL74HVM": "ami-b764d6d3"
            },
            "eu-central-1": {
                "RHEL74HVM": "ami-7def1712"
            },
            "eu-west-1": {
                "RHEL74HVM": "ami-b22961c1"
            },
            "eu-west-2": {
                "RHEL74HVM": "ami-b9353fdd"
            },
            "sa-east-1": {
                "RHEL74HVM": "ami-28f66a44"
            },
            "us-east-1": {
                "RHEL74HVM": "ami-c998b6b2"
            },
            "us-east-2": {
                "RHEL74HVM": "ami-0a33696f"
            },
            "us-west-1": {
                "RHEL74HVM": "ami-f88fc498"
            },
            "us-west-2": {
                "RHEL74HVM": "ami-5dd3743d"
            }
        },
        "LinuxAMINameMap": {
            "Redhat-Enterprise-Linux-7": {
                "Code": "RHEL74HVM"
            }
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [{
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "lambda_policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "cloudformation:DescribeStacks"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }]
            }
        },
        "KeyGen": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/genrsa_lambda.zip"
                    }
                },
                "Handler": "service.handler",
                "Runtime": "python2.7",
                "Timeout": "5",
                "Role": {
                    "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
                }
            }
        },
        "GetRSA": {
            "Type": "Custom::GenerateKeys",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["KeyGen", "Arn"]
                },
                "ResponseURL": {
                    "Fn::Join": ["", ["http://ResponseURL",
                        {
                            "Ref": "AWS::StackId"
                        }, "RequestId"
                    ]]
                },
                "StackId": {
                    "Ref": "AWS::StackId"
                },
                "ResourceProperties": {
                    "RequestType": "Create",
                    "RequestId": {
                        "Fn::Join": ["", [{
                            "Ref": "AWS::StackId"
                        }, "RequestId"]]
                    },
                    "LogicalResourceId": "KeyGenLogicalResourceId"
                }

            },
            "DependsOn": ["KeyGen"]
        },
        "OpenShiftSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [{
                        "IpProtocol": "-1",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8444",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                        "PolicyName": "aws-quick-start-s3-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [{
                                "Action": [
                                    "s3:GetObject"
                                ],
                                "Resource": {
                                    "Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                                },
                                "Effect": "Allow"
                            }]
                        }
                    },
                    {
                        "PolicyName": "WorkloadSetup",
                        "PolicyDocument": {
                            "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "autoscaling:Describe*",
                                    "ec2:Describe*"
                                ],
                                "Resource": "*"
                            }]
                        }
                    }

                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "SetupRole"
                }]
            }
        },
        "OpenShiftMasterASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "GetRSA",
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "NumberOfMaster"
                },
                "MaxSize": {
                    "Ref": "NumberOfMaster"
                },
                "MinSize": {
                    "Ref": "NumberOfMaster"
                },
                "LaunchConfigurationName": {
                    "Ref": "OpenShiftMasterASLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-master"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    },
                    {
                        "Ref": "PublicSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftEtcdASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "OpenShiftMasterASG",
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "NumberOfEtcd"
                },
                "MaxSize": {
                    "Ref": "NumberOfEtcd"
                },
                "MinSize": {
                    "Ref": "NumberOfEtcd"
                },
                "LaunchConfigurationName": {
                    "Ref": "OpenShiftEtcdLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-etcd"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftNodeASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "OpenShiftMasterASG",
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "NumberOfNodes"
                },
                "MaxSize": {
                    "Ref": "NumberOfNodes"
                },
                "MinSize": {
                    "Ref": "NumberOfNodes"
                },

                "LaunchConfigurationName": {
                    "Ref": "OpenShiftNodesLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-nodes"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftEtcdLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "80"
                    }
                }],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",
                                "########################################################################################################################\n",
                                "# Load QuickStart Common Utils",
                                "#\n",
                                "UTIL=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "submodules/quickstart-linux-utilities/quickstart-cfn-tools.source",
                                "\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}",
                                "\n",
                                "########################################################################################################################\n",
                                "# Install AWS cfn-bootstrap",
                                "\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "########################################################################################################################\n",
                                "\n",
                                "#Attach to Subscription pool\n",
                                "subscription-manager register",
                                " --username=",
                                {
                                    "Ref": "RedhatSubscriptionUserName"
                                },
                                " --password=",
                                {
                                    "Ref": "RedhatSubscriptionPassword"
                                },
                                " --force",
                                "\n",
                                "POOL_ID=",
                                {
                                    "Ref": "RedhatSubscriptionPoolID"
                                },
                                "\n",
                                "subscription-manager attach --pool=${POOL_ID}\n",
                                "yum-config-manager --disable *\n",
                                "yum clean all\n",
                                "yum repolist | grep OpenShift \n",
                                "subscription-manager repos ",
                                "--disable=\"rhel-7-server-ose-3.5-rpms\" ",
                                "--enable=\"rhel-7-server-ose-3.6-rpms\" ",
                                "--enable=\"rhel-7-server-extras-rpms\" ",
                                "--enable=\"rhel-7-fast-datapath-rpms\" ",
                                "\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftEtcdLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "OpenShiftNodesLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "80",
                            "VolumeType": "gp2"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdb",
                        "Ebs": {
                            "VolumeSize": "110",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",
                                "########################################################################################################################\n",
                                "# Load QuickStart Common Utils",
                                "#\n",
                                "UTIL=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "submodules/quickstart-linux-utilities/quickstart-cfn-tools.source",
                                "\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}",
                                "\n",
                                "########################################################################################################################\n",
                                "# Install AWS cfn-bootstrap",
                                "\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "########################################################################################################################\n",
                                "\n",
                                "#Attach to Subscription pool\n",
                                "subscription-manager register",
                                " --username=",
                                {
                                    "Ref": "RedhatSubscriptionUserName"
                                },
                                " --password=",
                                {
                                    "Ref": "RedhatSubscriptionPassword"
                                },
                                " --force",
                                "\n",
                                "POOL_ID=",
                                {
                                    "Ref": "RedhatSubscriptionPoolID"
                                },
                                "\n",
                                "subscription-manager attach --pool=${POOL_ID}\n",
                                "yum-config-manager --disable *\n",
                                "yum clean all\n",
                                "yum repolist | grep OpenShift \n",
                                "subscription-manager repos ",
                                "--disable=\"rhel-7-server-ose-3.5-rpms\" ",
                                "--enable=\"rhel-7-server-ose-3.6-rpms\" ",
                                "--enable=\"rhel-7-server-extras-rpms\" ",
                                "--enable=\"rhel-7-fast-datapath-rpms\" ",
                                "\n",
                                "# Configure Storage\n",
                                "yum install docker -y \n",
                                "systemctl enable docker.service \n",
                                "systemctl start docker.service \n",
                                "echo \"CONTAINER_THINPOOL=docker-pool\" >> /etc/sysconfig/docker-storage-setup \n",
                                "echo \"DEVS=/dev/xvdb\" >> /etc/sysconfig/docker-storage-setup \n",
                                "echo \"VG=docker-vg\" >>/etc/sysconfig/docker-storage-setup \n",
                                "echo \"STORAGE_DRIVER=devicemapper\" >> /etc/sysconfig/docker-storage-setup \n",
                                "docker-storage-setup\n",
                                "rm -rf /var/lib/docker\n",
                                "systemctl restart  docker\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftNodesLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "OpenShiftMasterASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "GetRSA",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "80"
                    }
                }],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",
                                "########################################################################################################################\n",
                                "# Load QuickStart Common Utils",
                                "#\n",
                                "UTIL=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "submodules/quickstart-linux-utilities/quickstart-cfn-tools.source",
                                "\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}",
                                "\n",
                                "########################################################################################################################\n",
                                "# Install AWS cfn-bootstrap",
                                "\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "########################################################################################################################\n",
                                "\n",
                                "#Attach to Subscription pool\n",
                                "subscription-manager register",
                                " --username=",
                                {
                                    "Ref": "RedhatSubscriptionUserName"
                                },
                                " --password=",
                                {
                                    "Ref": "RedhatSubscriptionPassword"
                                },
                                " --force",
                                "\n",
                                "POOL_ID=",
                                {
                                    "Ref": "RedhatSubscriptionPoolID"
                                },
                                "\n",
                                "subscription-manager attach --pool=${POOL_ID}\n",
                                "yum-config-manager --disable *\n",
                                "yum clean all\n",
                                "yum repolist | grep OpenShift \n",
                                "subscription-manager repos ",
                                "--disable=\"rhel-7-server-ose-3.5-rpms\" ",
                                "--enable=\"rhel-7-server-ose-3.6-rpms\" ",
                                "--enable=\"rhel-7-server-extras-rpms\" ",
                                "--enable=\"rhel-7-fast-datapath-rpms\" ",
                                "\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftMasterASLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AnsibleConfigServer": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "OpenShiftNodeASG",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "cfg_node_keys": ["GetPublicKey", "AddPublicKey", "SetPrivateKey"],
                        "cfg_ansible": ["CfgAnsible"],
                        "cfg_networkmgr": ["rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "SetPrivateKey": {
                        "files": {
                            "/root/.ssh/id_rsa": {
                                "content": {
                                    "Fn::Join": ["", [{
                                            "Fn::GetAtt": ["GetRSA", "PEM"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "CfgAnsible": {
                        "packages": {
                            "yum": {
                                "ansible": []
                            }
                        },
                        "commands": {
                            "disable-host-key-checking": {
                                "command": "sed -i 's/#host_key_checking = False/host_key_checking = False/g' /etc/ansible/ansible.cfg",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "ansible-configserver"
                }],
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "NetworkInterfaces": [{
                    "DeleteOnTermination": "true",
                    "SubnetId": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "DeviceIndex": "0",
                    "AssociatePublicIpAddress": "true",
                    "PrivateIpAddresses": [{
                        "Primary": "true",
                        "PrivateIpAddress": "10.0.128.10"
                    }],
                    "GroupSet": [{
                        "Ref": "OpenShiftSecurityGroup"
                    }]
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",
                                "########################################################################################################################\n",
                                "# Load QuickStart Common Utils",
                                "#\n",
                                "UTIL=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "submodules/quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                                "\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}",
                                "\n",
                                "########################################################################################################################\n",
                                "# Install AWS cfn-bootstrap",
                                "\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "########################################################################################################################\n",
                                "#Enable epel for inital ansible availability\n",
                                "qs_enable_epel &> /var/log/userdata.qs_enable_epel.log || qs_err \" enable epel failed \"\n",
                                "#\n",
                                "pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err \" awscli install failed \"\n",
                                "# Start cfn-configset [cfg_node_keys]",
                                "\n",
                                "aws s3 cp ",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "scripts/get_nodes.py  ~/get_nodes.py \n",
                                "pip install boto3 &> /var/log/userdata.boto3_install.log || qs_err \" boto3 install failed \"\n",
                                "python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftMasterASG"
                                }, " ", "masters ",
                                " > /tmp/openshift_instances-master",
                                "\n",
                                "python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftEtcdASG"
                                }, " ", "etcd > /tmp/openshift_instances-etcd",
                                "\n",
                                "python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftNodeASG"
                                }, " ", "nodes > /tmp/openshift_instances-nodes",
                                "\n",
                                "cfn-init -v ",
                                "--stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource AnsibleConfigServer",
                                " --configsets cfg_node_keys ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Start cfn-configset [cfg_ansible]\n",
                                "cfn-init -v ",
                                "   --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "   --resource AnsibleConfigServer ",
                                "   --configsets cfg_ansible ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"Begin OpenShift configuration\"\n",
                                "aws s3 cp ",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "scripts/openshift_config_ose.yml  ~/openshift_config.yml \n",
                                "cat ~/openshift_config.yml >/etc/ansible/hosts \n",
                                "cat /tmp/openshift_instances-* >>/etc/ansible/hosts \n",
                                "sed -i 's/#pipelining = False/pipelining = True/g' /etc/ansible/ansible.cfg \n",
                                "sed -i 's/#log_path/log_path/g' /etc/ansible/ansible.cfg \n",
                                "ansible -m ping all || n=0; until [[ $n -ge 50 ]]; do ansible -m ping all && break; n=$[$n+1]; done",
                                "\n",
                                "#Attach to Subscription pool\n",
                                "subscription-manager register",
                                " --username=",
                                {
                                    "Ref": "RedhatSubscriptionUserName"
                                },
                                " --password=",
                                {
                                    "Ref": "RedhatSubscriptionPassword"
                                },
                                " --force",
                                "\n",
                                "POOL_ID=",
                                {
                                    "Ref": "RedhatSubscriptionPoolID"
                                },
                                "\n",
                                "subscription-manager attach --pool=${POOL_ID}\n",
                                "yum-config-manager --disable *\n",
                                "yum clean all\n",
                                "subscription-manager repos ",
                                "--disable=\"rhel-7-server-ose-3.5-rpms\" ",
                                "--enable=\"rhel-7-server-ose-3.6-rpms\" ",
                                "--enable=\"rhel-7-server-extras-rpms\" ",
                                "--enable=\"rhel-7-fast-datapath-rpms\" ",
                                "\n",
                                "yum repolist | grep OpenShift \n",
                                "#Install dependancies\n",
                                "yum -y install wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct\n",
                                "yum -y update \n",
                                "yum -y install atomic-openshift-utils\n",
                                "yum -y install atomic-openshift-excluder atomic-openshift-docker-excluder\n",
                                "PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlayBookType"
                                },
                                "\"\n",
                                "if [ $PLAYBOOK -eq \"Subscription-Version\" ]; then \n",
                                "  echo \"Using Builtin Playbooks\"\n",
                                "else\n",
                                "  echo \"Override Builtin Playbooks\" \n",
                                "  touch ~/override_Playbooks \n",
                                "CURRENT_PLAYBOOK_VERSION=https://github.com/openshift/openshift-ansible/archive/openshift-ansible-",
                                {
                                    "Ref": "AnsiblePlayBookGitRepoTag"
                                },
                                ".tar.gz\n",
                                "curl  --retry 5  -Ls ${CURRENT_PLAYBOOK_VERSION} -o openshift-ansible.tar.gz \n",
                                "tar -zxf openshift-ansible.tar.gz \n",
                                "mkdir -p /usr/share/ansible \n",
                                "mv openshift-ansible-* /usr/share/ansible/openshift-ansible \n",
                                "fi",
                                "\n",
                                "yum -y install atomic-openshift-excluder atomic-openshift-docker-excluder\n",
                                "atomic-openshift-excluder unexclude\n",
                                "echo \" Start Ansible PlayBook execution\"\n",
                                "date >>~/playbooks.info\n",
                                "ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/byo/config.yml || qs_err \" ansible-playbook failed!! \"\n",
                                "date >>~/playbooks.info\n",
                                "echo \" Finish Ansible PlayBook execution\"\n",
                                "\n",
                                "# Add users\n",
                                "ansible masters -a \"htpasswd -b /etc/origin/master/htpasswd  admin admin\"\n",
                                "echo \"Start cfn stack signaling\"\n",
                                "# Signal resource using [qs_status] via cfn-init\n",
                                "echo \"[qs_status] = $(qs_status)\"\n",
                                "cfn-signal -e $(qs_status) ",
                                "   --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "   --resource AnsibleConfigServer ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"End cfn stack signaling\"\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT240M"
                }
            }
        }
    }
}